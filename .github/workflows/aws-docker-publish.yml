name: Publish to Amazon ECR

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      AWS_ECR_REPOSITORY:
        required: true
      GITHUB_PACKAGES_USERNAME:
        required: true
      GITHUB_PACKAGES_PASSWORD:
        required: true

jobs:
  build-docker-and-publish:
    name: Build and push a Docker image (using ${{ inputs.environment }} environment)
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # so the dependencies may be downloaded from GitHub artifact repository
      - name: Configure Maven settings.xml with PAT
        uses: whelk-io/maven-settings-xml-action@v20
        with:
          servers: '[{ "id": "github", "username": "${{ secrets.GITHUB_PACKAGES_USERNAME }}", "password": "${{ secrets.GITHUB_PACKAGES_PASSWORD }}" }]'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@261a7de32bda11ba01f4d75c4ed6caf3739e54be

      - name: Configure image name and version
        run: |
          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
          echo "IMAGE_NAME=$ECR_REGISTRY/${{ secrets.AWS_ECR_REPOSITORY }}:${{ env.RELEASE_VERSION }}" >> $GITHUB_ENV

      - name: Check if Docker image with tag exists in ECR
        run: |
          echo "IMAGE_NAME = aws ecr list-images --repository-name ${{ secrets.AWS_ECR_REPOSITORY }} --region ${{ secrets.AWS_REGION }} --query \"imageIds[?imageTag=='${{ env.RELEASE_VERSION }}'].imageTag\" --output text" >> $GITHUB_ENV

      #          aws ecr list-images --repository-name ${{ secrets.AWS_ECR_REPOSITORY }} --query "imageIds[?imageTag=='${{ env.RELEASE_VERSION }}'].imageTag" --output text >> $IMAGE_EXISTS
      #          echo "Image exists: $IMAGE_EXISTS"

      #      - name: Check if Docker image with tag exists in ECR
      #        id: check-image-exists
      #        uses: mnmandahalf/check-ecr-image-exists@v0.1.1
      #        with:
      #          region: ${{ secrets.AWS_REGION }}
      #          repository-name: ${{ secrets.AWS_ECR_REPOSITORY }}
      #          image-tag: ${{ env.RELEASE_VERSION }}
      #          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build, tag, and push image to Amazon ECR
        if: ${{ env.execute == 0 }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          mvn spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName=$ECR_REGISTRY/${{ secrets.AWS_ECR_REPOSITORY }}:${{ env.RELEASE_VERSION }}
          docker push $ECR_REGISTRY/${{ secrets.AWS_ECR_REPOSITORY }}:${{ env.RELEASE_VERSION }}
          echo "IMAGE_NAME=$ECR_REGISTRY/${{ secrets.AWS_ECR_REPOSITORY }}:${{ env.RELEASE_VERSION }}" >> $GITHUB_ENV
        env:
          execute: ${{ env.IMAGE_EXISTS != env.RELEASE_VERSION }}